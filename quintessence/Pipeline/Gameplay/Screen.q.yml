parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: Pipeline::Gameplay::Screen::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true

  - name: game_configuration
    type: AllegroFlare::GameConfigurations::Base*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: entity_pool
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool
    init_with: ''

  - name: player_controlled_entity
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*
    init_with: nullptr

  - name: player_control_velocity
    type: AllegroFlare::Vec2D
    init_with: ''

  - name: scene_renderer
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::SceneRenderer2
    init_with: ''

  - name: current_level_identifier
    type: std::string
    init_with: '"[unset-current_level]"'

  - name: current_level
    type: Pipeline::Gameplay::Level*
    init_with: nullptr

  - name: on_finished_callback_func
    type: std::function<void(Pipeline::Gameplay::Screen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_finished_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"Pipeline/Gameplay/Screen"'
    static: true
    constexpr: true


methods:


  - name: set_event_emitter
    guards: [ (!initialized) ]
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: set_model_bin
    guards: [ (!initialized) ]
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
    body: |
      this->model_bin = model_bin;
      return;
      return;


  - name: load_level_by_identifier
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    guards: [ game_configuration ]
    body: |
      player_controlled_entity = nullptr;
      player_control_velocity = { 0.0f, 0.0f };
      // TODO: Clear pool


      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityFactory entity_factory;
      entity_factory.set_bitmap_bin(bitmap_bin);
      entity_factory.set_model_bin(model_bin);


      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Camera3D* camera_entity =
         entity_factory.create_camera_3d();
      AllegroFlare::Camera3D &camera = camera_entity->get_camera_3d_ref();
      camera_entity->set("primary_camera");
      camera.stepout = { 0, 1.0, 4.0 };
      camera.spin = 0.1;
      entity_pool.add(camera_entity);

      // TODO: Use an EntityFactory for this setup
      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *item = 
         new AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D();
      item->set_model_3d(model_bin->auto_get("rounded_unit_cube-01.obj"));
      item->set(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags::RENDER_WITH_SKYBOX);
      item->get_placement_ref().position.y = 1.0;
      item->get_placement_ref().rotation.x = 0.05;
      item->get_placement_ref().rotation.z = 0.03547;
      entity_pool.add(item);

      // TODO: Use an EntityFactory for this setup
      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *dynamic_cube = 
         new AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D();
      dynamic_cube->set_model_3d(model_bin->auto_get("rounded_unit_cube-01.obj"));
      dynamic_cube->set_model_3d_texture(bitmap_bin->auto_get("uv.png"));
      dynamic_cube->get_placement_ref().position.x = 1.5;
      dynamic_cube->get_placement_ref().position.y = 0.5;
      entity_pool.add(dynamic_cube);

      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *env = 
         new AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D();
      env->set_model_3d(model_bin->auto_get("simple_scene-01.obj"));
      //rounded_unit_cube-01.obj"));
      env->set_model_3d_texture(bitmap_bin->auto_get("simple_scene-01-1024.jpg"));
      env->get_placement_ref().position.x = 0;
      env->get_placement_ref().position.y = 0;
      entity_pool.add(env);


      player_controlled_entity = dynamic_cube;



      return;
      // Destroy the current level
      if (current_level)
      {
         // TODO: Shutdown current level
         delete current_level;
      }

      // Load the new level
      AllegroFlare::Levels::Base *loaded_level = game_configuration->load_level_by_identifier(level_identifier);
      if (loaded_level)
      {
         // TODO: Consider how to have this level loading mechanism removed, specifically the dependency on the configuration
         // For now, confirm the type, and cast
         if (!loaded_level->is_type(Pipeline::Gameplay::Level::TYPE))
         {
            throw std::runtime_error("Loaded level not of expected type");
         }
         current_level_identifier = level_identifier;
         current_level = static_cast<Pipeline::Gameplay::Level*>(loaded_level);
      }
      return;
    body_dependency_symbols:
     - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D
     - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags
     - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityFactory
     - Pipeline::GameConfigurations::Main
     - Pipeline::Gameplay::Level


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |
      // Setup scene renderer
      scene_renderer.set_entity_pool(&entity_pool);
      //scene_renderer.setup_result_surface_bitmap(1920 / 3, 1080 / 3);
      scene_renderer.setup_result_surface_bitmap(1920, 1080); // For some reason, 
      scene_renderer.setup_shadow_map_buffer();
      scene_renderer.setup_cubemapping(bitmap_bin->get_path() + "black_prism_1-01.png");
      scene_renderer.setup_multitexture_shader();

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: get_player_controlled_entity_as
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D*
    body: |
      if (!player_controlled_entity->is_type(
               AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D::TYPE
            )
         )
      {
         throw std::runtime_error("unexpected player controlled entity type");
      }

      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *as =
         static_cast<AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *>(
            player_controlled_entity
         );
      return as;


  - name: update
    body: |
      // Spin our shadow casted light
      AllegroFlare::Camera3D *light = scene_renderer.get_shadow_map_buffer_ref().get_light();
      //light->spin -= 0.001f;

      // Pan the camera
      AllegroFlare::Camera3D *primary_camera = scene_renderer.find_primary_camera_3d();
      //primary_camera->stepout.z += 0.01;
      //primary_camera->spin += 0.0005;
      //primary_camera->tilt += 0.0008;

      // HERE:
      if (player_controlled_entity)

      auto player_entity_as = get_player_controlled_entity_as();

      // Rotate objects in the scene
      //item->get_placement_ref().rotation.x += 0.005;
      //item->get_placement_ref().rotation.z += 0.003547;
      return;


  - name: render
    guards: [ initialized ]
    body: |
      ALLEGRO_BITMAP *initial_target_bitmap = al_get_target_bitmap();

      // Render the scene
      scene_renderer.render();
      ALLEGRO_BITMAP *render_surface = scene_renderer.get_render_surface_ref().obtain_surface();

      bool save_bitmaps = false;
      if (save_bitmaps)
      {
         al_save_bitmap(
            "/Users/markoates/Desktop/shadow_buffer_bitmap.png",
            scene_renderer.get_shadow_map_buffer_ref().get_result_bitmap()
         );
         //shadow_map_buffer.get_result_bitmap();
         al_save_bitmap(
            "/Users/markoates/Desktop/render_surface.png",
            render_surface
         );
      }

      al_set_target_bitmap(initial_target_bitmap);
      al_draw_bitmap(render_surface, 0, 0, 0);
      //al_draw_filled_rectangle(0, 0, 300, 300, ALLEGRO_COLOR{1, 0, 0, 1});
      return;


  - name: call_on_finished_callback_func
    body: |
      // TODO: Test this callback call
      if (on_finished_callback_func) on_finished_callback_func(this, on_finished_callback_func_user_data);


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ game_event ]
    body: |
      // game_configuration->handle_game_event(game_event);
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      update();
      render();
      return;


  - name: key_down_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter ]
    body: |
      switch(ev->keyboard.keycode)
      {
         case ALLEGRO_KEY_UP: {
            //move_development_cursor_up();
         } break;

         case ALLEGRO_KEY_DOWN: {
            //move_development_cursor_down();
         } break;

         case ALLEGRO_KEY_LEFT: {
            //move_development_cursor_down();
         } break;

         case ALLEGRO_KEY_RIGHT: {
            //move_development_cursor_down();
         } break;

         default: {
            //attempt_an_action_at(ev->keyboard.keycode);
         } break;
      }

      return;
    body_dependency_symbols: []


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      //call_on_finished_callback_func(); // Consider technique to exit
      return;


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;



dependencies:


  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: Pipeline::Gameplay::Screen
    headers: [ Pipeline/Gameplay/Screen.hpp ]
  - symbol: AllegroFlare::GameConfigurations::Base
    headers: [ AllegroFlare/GameConfigurations/Base.hpp ]
  - symbol: Pipeline::GameConfigurations::Main
    headers: [ Pipeline/GameConfigurations/Main.hpp ]
  - symbol: Pipeline::Gameplay::Level
    headers: [ Pipeline/Gameplay/Level.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::SceneRenderer2
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityFactory
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]


