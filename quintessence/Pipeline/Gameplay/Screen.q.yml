parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: Pipeline::Gameplay::Screen::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true

  - name: game_configuration
    type: AllegroFlare::GameConfigurations::Base*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: entity_pool
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool
    init_with: ''

  - name: player_controlled_entity
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*
    init_with: nullptr

  - name: player_control_velocity
    type: AllegroFlare::Vec2D
    init_with: ''

  - name: goal_entity
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*
    init_with: nullptr

  - name: scene_renderer
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::SceneRenderer2
    init_with: ''

  - name: current_level_identifier
    type: std::string
    init_with: '"[unset-current_level]"'

  - name: current_level
    type: Pipeline::Gameplay::Level*
    init_with: nullptr

  - name: on_finished_callback_func
    type: std::function<void(Pipeline::Gameplay::Screen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_finished_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"Pipeline/Gameplay/Screen"'
    static: true
    constexpr: true

  - name: state
    type: uint32_t
    init_with: STATE_UNDEF
    getter: true
    setter: explicit

  - name: state_is_busy
    type: bool
    init_with: false

  - name: state_changed_at
    type: float
    init_with: 0.0f


enums:


  - name: State
    enumerators:
      - STATE_UNDEF
      - STATE_REVEALING
      - STATE_PLAYING_GAME
      - STATE_SUSPEND_FOR_DIALOG


methods:


  - name: set_event_emitter
    guards: [ (!initialized) ]
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: set_model_bin
    guards: [ (!initialized) ]
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
    body: |
      this->model_bin = model_bin;
      return;
      return;


  - name: trivial_collide
    type: bool
    parameters:
      - name: p1
        type: AllegroFlare::Vec3D
        default_argument: '{0.0f, 0.0f, 0.0f}'
      - name: p2
        type: AllegroFlare::Vec3D
        default_argument: '{0.0f, 0.0f, 0.0f}'
      - name: min_distance
        type: float
        default_argument: 10.0f
    body: |
      float squared_distance = (p1.x - p2.x) * (p1.x - p2.x)
                             + (p1.y - p2.y) * (p1.y - p2.y)
                             + (p1.z - p2.z) * (p1.z - p2.z);
      float min_distance_squared = min_distance * min_distance;
      return squared_distance < min_distance_squared;


  - name: set_primary_camera_to_gameplay_view
    body: |
      AllegroFlare::Camera3D *primary_camera = scene_renderer.find_primary_camera_3d();
      primary_camera->stepout = { 0.0, 0.0, 18.0 };
      primary_camera->spin = 0.5;
      primary_camera->tilt = 0.75;
      primary_camera->zoom = 3.0;
      return;


  - name: set_primary_camera_to_dialog_view
    body: |
      AllegroFlare::Camera3D *primary_camera = scene_renderer.find_primary_camera_3d();
      primary_camera->stepout = { 0.0, 0.0, 10.0 };
      primary_camera->spin = 0.5 - 0.2;
      primary_camera->tilt = 0.75 - 0.4;
      primary_camera->zoom = 2.8;
      return;


  - name: load_level_by_identifier
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    guards: [ game_configuration ]
    body: |
      player_controlled_entity = nullptr;
      player_control_velocity = { 0.0f, 0.0f };

      goal_entity = nullptr;

      // TODO: Clear pool


      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityFactory entity_factory;
      entity_factory.set_bitmap_bin(bitmap_bin);
      entity_factory.set_model_bin(model_bin);


      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Camera3D* camera_entity =
         entity_factory.create_camera_3d();
      AllegroFlare::Camera3D &camera = camera_entity->get_camera_3d_ref();
      camera_entity->set("primary_camera");
      //camera.stepout = { 0.0, 0.0, 18.0 };
      //camera.spin = 0.5;
      //camera.tilt = 0.75;
      //camera.zoom = 3.0;
      entity_pool.add(camera_entity);

      // TODO: Use an EntityFactory for this setup
      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *item = 
         new AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D();
      item->set_model_3d(model_bin->auto_get("rounded_unit_cube-01.obj"));
      item->set(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags::RENDER_WITH_SKYBOX);
      item->get_placement_ref().position.y = 1.0;
      item->get_placement_ref().rotation.x = 0.05;
      item->get_placement_ref().rotation.z = 0.03547;
      //item->get_placement_ref().scale.y = 1.0;
      //item->get_placement_ref().scale.x = 0.5;
      //item->get_placement_ref().scale.z = 0.5;
      //item->get_placement_ref().velocity.y = 1.0;
      //item->get_placement_ref().sc.x = 0.05;
      //item->get_placement_ref().scale.z = 0.03547;
      entity_pool.add(item);

      // TODO: Use an EntityFactory for this setup
      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *dynamic_cube = 
         new AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D();
      dynamic_cube->set_model_3d(model_bin->auto_get("robot-02.obj"));
      dynamic_cube->set_model_3d_texture(bitmap_bin->auto_get("robot-textured-02-uv.jpg"));
      //dynamic_cube->set_model_3d(model_bin->auto_get("rounded_unit_cube-01.obj"));
      //dynamic_cube->set_model_3d_texture(bitmap_bin->auto_get("uv.png"));
      dynamic_cube->get_placement_ref().position.x = 2.5;
      dynamic_cube->get_placement_ref().position.y = 0.5;
      dynamic_cube->get_placement_ref().scale = { 0.08, 0.08, 0.08 };
      dynamic_cube->get_placement_ref().rotation = { 0.0, -0.25, 0.0 };
      entity_pool.add(dynamic_cube);

      std::string world_model_name = level_identifier; //"world-1-01";
      std::string world_model_obj_name = world_model_name + ".obj";
      std::string world_model_texture_name = world_model_name + ".png";

      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *env = 
         new AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D();
      env->set_model_3d(model_bin->auto_get("world-1-01.obj"));
      //env->set_model_3d(model_bin->auto_get("simple_scene-01.obj"));
      env->set_model_3d(model_bin->auto_get(world_model_obj_name));
      //rounded_unit_cube-01.obj"));
      //env->set_model_3d_texture(bitmap_bin->auto_get("simple_scene-01-1024.jpg"));
      env->set_model_3d_texture(bitmap_bin->auto_get(world_model_texture_name));
      env->get_placement_ref().position.x = 0;
      env->get_placement_ref().position.y = 0;
      entity_pool.add(env);
      //level_identifier


      // Assign our "special" items
      player_controlled_entity = dynamic_cube;
      goal_entity = item;



      // Set our initial positions
      set_primary_camera_to_gameplay_view(); // This will be our default initialization position, and could be modified
                                             // in the next step by starting the game


      // Start the game
      set_state(STATE_PLAYING_GAME);


      return;
      // Destroy the current level
      if (current_level)
      {
         // TODO: Shutdown current level
         delete current_level;
      }

      // Load the new level
      AllegroFlare::Levels::Base *loaded_level = game_configuration->load_level_by_identifier(level_identifier);
      if (loaded_level)
      {
         // TODO: Consider how to have this level loading mechanism removed, specifically the dependency on the configuration
         // For now, confirm the type, and cast
         if (!loaded_level->is_type(Pipeline::Gameplay::Level::TYPE))
         {
            throw std::runtime_error("Loaded level not of expected type");
         }
         current_level_identifier = level_identifier;
         current_level = static_cast<Pipeline::Gameplay::Level*>(loaded_level);
      }
      return;
    body_dependency_symbols:
     - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D
     - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags
     - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityFactory
     - Pipeline::GameConfigurations::Main
     - Pipeline::Gameplay::Level


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |
      // Setup scene renderer
      scene_renderer.set_entity_pool(&entity_pool);
      //scene_renderer.setup_result_surface_bitmap(1920 / 3, 1080 / 3);
      scene_renderer.setup_result_surface_bitmap(1920, 1080); // For some reason, 
      scene_renderer.setup_shadow_map_buffer();
      scene_renderer.setup_cubemapping(bitmap_bin->get_path() + "black_prism_1-01.png");
      scene_renderer.setup_multitexture_shader();

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: get_player_controlled_entity_as
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D*
    body: |
      if (!player_controlled_entity->is_type(
               AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D::TYPE
            )
         )
      {
         throw std::runtime_error("unexpected player controlled entity type");
      }

      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *as =
         static_cast<AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *>(
            player_controlled_entity
         );
      return as;


  - name: get_goal_entity_as
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D*
    body: |
      if (!goal_entity->is_type(
               AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D::TYPE
            )
         )
      {
         throw std::runtime_error("unexpected player controlled entity type");
      }

      AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *as =
         static_cast<AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D *>(
            goal_entity
         );
      return as;


  - name: on_player_entity_collide
    parameters:
      - name: colliding_entity
        type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D*
        default_argument: nullptr
    body: |
      if (!is_state(STATE_PLAYING_GAME)) return;

      if (colliding_entity == goal_entity)
      {
         // Handle goal collision
         set_state(STATE_SUSPEND_FOR_DIALOG);
         event_emitter->emit_activate_dialog_node_by_name_event("start_node");
         //call_on_finished_callback_func();
      }
      return;


  - name: update
    body: |
      // Spin our shadow casted light
      AllegroFlare::Camera3D *light = scene_renderer.get_shadow_map_buffer_ref().get_light();
      light->spin = -1.0f;

      // Pan the camera
      AllegroFlare::Camera3D *primary_camera = scene_renderer.find_primary_camera_3d();
      //primary_camera->stepout.z += 0.01;
      //primary_camera->spin += 0.0005;
      //primary_camera->tilt += 0.0008;

      // HERE:

      //player_control_velocity.x = -0.001;
      bool lock_light_on_player_controlled_entity = true;
      bool lock_camera_on_player_controlled_entity = true;
      if (player_controlled_entity)
      {
         // Translate the player control angles to be relative to the camera
         float angle = primary_camera->spin;
         float x_prime = player_control_velocity.x * cos(angle) - player_control_velocity.y * sin(angle);
         float y_prime = player_control_velocity.x * sin(angle) + player_control_velocity.y * cos(angle);

         // Move the player
         auto player_entity_as = get_player_controlled_entity_as();
         player_entity_as->get_placement_ref().position.x += x_prime;
         player_entity_as->get_placement_ref().position.z += y_prime;

         // Update the player model rotation to face the moving direction
         if (fabs(x_prime) + fabs(y_prime) > 0.001) // Only update the rotation if the player is moving
         {
            AllegroFlare::Vec2D prime(x_prime, y_prime);
            float angle_in_radians = prime.get_angle();
            float angle_in_degrees = angle_in_radians * (180.0 / ALLEGRO_PI);
            float angle_in_units = angle_in_degrees / 360.0f;

            bool smooth = true;
            float final_angle = 0.0f;

            if (!smooth)
            {
               final_angle = -angle_in_units;
            }
            else
            {
               // Smoothly rotate our player character to the direction of travel
               float target_angle_in_units = -angle_in_units;
               float current_angle_in_units = player_entity_as->get_placement_ref().rotation.y;

               float rotation_rate = 0.1;
               float target = fmod(target_angle_in_units, 1.0f);
               float current = fmod(current_angle_in_units, 1.0f);
               float angular_distance = (target - current);

               // Use "angular wraparound" to ensure the player doesn't do an unnecessary full 360
               // If the distance is more than 0.5, subtract 1 to go the shorter way
               // If the distance is less than -0.5, add 1 to go the shorter way
               if (angular_distance > 0.5f) angular_distance -= 1.0f;
               else if (angular_distance < -0.5f) angular_distance += 1.0f;

               // Set the final angle
               final_angle = angular_distance * rotation_rate + current;
            }

            player_entity_as->get_placement_ref().rotation.y = final_angle;
         }


         if (lock_camera_on_player_controlled_entity)
         {
            primary_camera->position.x = player_entity_as->get_placement_ref().position.x;
            primary_camera->position.y = player_entity_as->get_placement_ref().position.y;
            primary_camera->position.z = player_entity_as->get_placement_ref().position.z;
         }

         if (lock_light_on_player_controlled_entity)
         {
            light->position.x = player_entity_as->get_placement_ref().position.x;
            light->position.y = player_entity_as->get_placement_ref().position.y;
            light->position.z = player_entity_as->get_placement_ref().position.z;
         }

         if (!goal_entity)
         {
            throw std::runtime_error("Pipeline::Gameplay::Screen::update: no goal_entity");
         }
         else
         {
            auto goal_entity_as = get_goal_entity_as();
            bool collides = trivial_collide(
               player_entity_as->get_placement_ref().position,
               goal_entity_as->get_placement_ref().position,
               1.0
            );
            if (collides)
            {
               on_player_entity_collide(goal_entity_as);
            }
         }
      }



      //if (is_state(SUSPEND_FOR_DIALOG))
      //{
         
      //}

      // Check player collision on item
      //if (player_controlled_entity && goal_entity)
      //{
         //auto player_entity_as = get_player_controlled_entity_as();
      //}
      


      // Rotate objects in the scene
      //item->get_placement_ref().rotation.x += 0.005;
      //item->get_placement_ref().rotation.z += 0.003547;
      return;


  - name: render
    guards: [ initialized ]
    body: |
      ALLEGRO_BITMAP *initial_target_bitmap = al_get_target_bitmap();

      // Render the scene
      scene_renderer.render();
      ALLEGRO_BITMAP *render_surface = scene_renderer.get_render_surface_ref().obtain_surface();

      bool save_bitmaps = false;
      if (save_bitmaps)
      {
         al_save_bitmap(
            "/Users/markoates/Desktop/shadow_buffer_bitmap.png",
            scene_renderer.get_shadow_map_buffer_ref().get_result_bitmap()
         );
         //shadow_map_buffer.get_result_bitmap();
         al_save_bitmap(
            "/Users/markoates/Desktop/render_surface.png",
            render_surface
         );
      }

      al_set_target_bitmap(initial_target_bitmap);
      al_draw_bitmap(render_surface, 0, 0, 0);
      //al_draw_filled_rectangle(0, 0, 300, 300, ALLEGRO_COLOR{1, 0, 0, 1});
      return;


  - name: call_on_finished_callback_func
    body: |
      // TODO: Test this callback call
      if (on_finished_callback_func) on_finished_callback_func(this, on_finished_callback_func_user_data);


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ game_event ]
    body: |
      // game_configuration->handle_game_event(game_event);
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      update();
      render();
      return;


  - name: key_up_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter ]
    body: |
      if (!is_state(STATE_PLAYING_GAME)) return;

      switch(ev->keyboard.keycode)
      {
         case ALLEGRO_KEY_UP:
         case ALLEGRO_KEY_DOWN: {
            player_control_velocity.y = 0;
         } break;

         case ALLEGRO_KEY_LEFT:
         case ALLEGRO_KEY_RIGHT: {
            player_control_velocity.x = 0;
         } break;

         default: {
            //attempt_an_action_at(ev->keyboard.keycode);
         } break;
      }

      return;
    body_dependency_symbols: []


  - name: key_down_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter ]
    body: |
      if (!is_state(STATE_PLAYING_GAME)) return;

      float player_velocity = 0.04;
      switch(ev->keyboard.keycode)
      {
         case ALLEGRO_KEY_UP: {
            player_control_velocity.y = -player_velocity;
            //move_development_cursor_up();
         } break;

         case ALLEGRO_KEY_DOWN: {
            player_control_velocity.y = player_velocity;
            //move_development_cursor_down();
         } break;

         case ALLEGRO_KEY_LEFT: {
            player_control_velocity.x = -player_velocity;
            //move_development_cursor_down();
         } break;

         case ALLEGRO_KEY_RIGHT: {
            player_control_velocity.x = player_velocity;
            //move_development_cursor_down();
         } break;

         // TODO: Deliver the package with "enter"
         //case ALLEGRO_KEY_ENTER: {
            //attempt_to_deliver_package();
         //} break;

         default: {
            //attempt_an_action_at(ev->keyboard.keycode);
         } break;
      }

      return;
    body_dependency_symbols: []


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      //call_on_finished_callback_func(); // Consider technique to exit
      return;


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: set_state
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: override_if_busy
        type: bool
        default_argument: false
    guards: [ is_valid_state(state) ]
    body: |
      if (this->state == state) return;
      if (!override_if_busy && state_is_busy) return;
      uint32_t previous_state = this->state;

      switch (state)
      {
         case STATE_REVEALING: {
            player_control_velocity = {0, 0};
         } break;

         case STATE_PLAYING_GAME: {
            set_primary_camera_to_gameplay_view();
         } break;

         case STATE_SUSPEND_FOR_DIALOG: {
            set_primary_camera_to_dialog_view();
            player_control_velocity = {0, 0};
         } break;

         default:
            throw std::runtime_error("weird error");
         break;
      }

      this->state = state;
      state_changed_at = al_get_time();

      return;


  - name: update_state
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    guards: [ is_valid_state(state) ]
    body: |
      float age = infer_current_state_age(time_now);

      switch (state)
      {
         case STATE_REVEALING:
         break;

         case STATE_PLAYING_GAME:
         break;

         case STATE_SUSPEND_FOR_DIALOG:
         break;

         default:
            throw std::runtime_error("weird error");
         break;
      }

      return;


  - name: is_valid_state
    type: bool
    static: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
      std::set<uint32_t> valid_states =
      {
         STATE_REVEALING,
         STATE_PLAYING_GAME,
         STATE_SUSPEND_FOR_DIALOG,
      };
      return (valid_states.count(state) > 0);
    body_dependency_symbols:
      - std::set


  - name: is_state
    type: bool
    parameters:
      - name: possible_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
     return (state == possible_state);


  - name: infer_current_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    body: |
      return (time_now - state_changed_at);




dependencies:


  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: Pipeline::Gameplay::Screen
    headers: [ Pipeline/Gameplay/Screen.hpp ]
  - symbol: AllegroFlare::GameConfigurations::Base
    headers: [ AllegroFlare/GameConfigurations/Base.hpp ]
  - symbol: Pipeline::GameConfigurations::Main
    headers: [ Pipeline/GameConfigurations/Main.hpp ]
  - symbol: Pipeline::Gameplay::Level
    headers: [ Pipeline/Gameplay/Level.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::SceneRenderer2
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityFactory
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: AllegroFlare::Vec3D
    headers: [ AllegroFlare/Vec3D.hpp ]


