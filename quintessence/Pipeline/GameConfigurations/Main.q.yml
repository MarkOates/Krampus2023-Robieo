parent_classes:


  - class: AllegroFlare::GameConfigurations::Base
    scope: public
    init_with: Pipeline::GameConfigurations::Main::TYPE


properties:


  - name: TYPE
    type: char*
    init_with: '(char*)"Pipeline/GameConfigurations/Main"'
    static: true
    constexpr: true


methods:


  - name: are_all_packages_delivered
    type: bool
    parameters:
      - name: delivered_package_identifiers
        type: std::set<std::string>
        default_argument: '{}'
    body: |
      std::vector<std::pair<std::string, std::string>> all_levels =
         build_level_list_for_level_select_screen_by_identifier();

      // Build a list of all packages (from the list of levels for the level select screen)
      std::set<std::string> list_of_all_packages;
      for (auto &level : all_levels)
      {
         std::string level_identifier = level.second;
         list_of_all_packages.insert(level_identifier);
      }

      // Validate the list is sound (has the same number of elements as the level select screen)
      if (list_of_all_packages.size() != all_levels.size())
      {
         // There are non-unique level identifiers. That's unexpected for this game
         AllegroFlare::Logger::throw_error(
            "Pipeline::GameConfigurations::Main::are_all_packages_delivered",
            "When attempting to build the list_of_all_packages, it was not the same size as the levels for the level "
               "select screen, indicating there are non-unique level identifiers in the list. That's unexpected for "
               "this game."
         );
      }

      // Return if the delivered packages an list of all packages are the same
      // TODO: Test this
      return list_of_all_packages == delivered_package_identifiers;
    body_dependency_symbols:
      - std::set
      - AllegroFlare::Logger


  - name: build_level_list_for_level_select_screen_by_identifier
    virtual: true
    override: true
    type: std::vector<std::pair<std::string, std::string>>
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      std::vector<std::pair<std::string, std::string>> result = {
         { "World 1", "world-1-06" },
         //{ "World 2", "world-2-01" },
         //{ "Forest Village 1", "forest_village_1" },
         //{ "Forest Village 2", "forest_village_2" },
         //{ "Forest", "forest_1" },
         //{ "Crystal Cave", "crystal_cave_1" },
         //{ "Desert Town", "desert_town_3" },
         //{ "Town 2", "town_2" },
         //{ "Cave 1", "cave_1" },
         //{ "Town 1", "town_1" },
      };
      return result;


  - name: build_dialog_bank_by_identifier
    virtual: true
    override: true
    type: AllegroFlare::DialogTree::NodeBank
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[identifier-discarded]"'
    body: |
      // TODO: Test this contains the expected nodes
      AllegroFlare::DialogTree::NodeBank result_node_bank;

      // TODO: Consider joining the system nodes outside of the LevelFactory
      AllegroFlare::DialogTree::NodeBank system_node_bank =
         AllegroFlare::DialogTree::NodeBankFactory::build_common_system_dialogs_node_bank();
      result_node_bank.merge(&system_node_bank);

      return result_node_bank;
    body_dependency_symbols:
      - AllegroFlare::DialogTree::NodeBankFactory


  - name: load_level_by_identifier
    virtual: true
    override: true
    type: AllegroFlare::Levels::Base*
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // TODO: Replace void* with a better type (once the design is clear)
      Pipeline::Gameplay::Level *result = new Pipeline::Gameplay::Level();

      std::map<std::string, std::function<void()>> items_map = {
         { "forest_village_1", [result](){
            //result->set_background_image_identifier("maps/forest-village-1.png");
         }},
         { "forest_village_2", [result](){
            //result->set_background_image_identifier("maps/forest-village-2.png");
         }},
         { "forest_1", [result](){
            //result->set_background_image_identifier("maps/forest-1.png");
         }},
         { "crystal_cave_1", [result](){
            //result->set_background_image_identifier("maps/crystal-cave-1.png");
         }},
         { "desert_town_3", [result](){
            //result->set_background_image_identifier("maps/desert-town-3.png");
         }},
         { "town_2", [result](){
            //result->set_background_image_identifier("maps/town-2.png");
         }},
         { "cave_1", [result](){
            //result->set_background_image_identifier("maps/rpg-fit-backgrounds-ex-101.png");
         }},
         { "town_1", [result](){
            //result->set_background_image_identifier("maps/rpg-fit-backgrounds-x2-01.png");
         }},
      };

      // locate and call the function to handle the item
      if (items_map.count(identifier) == 0)
      {
         bool item_handled = false;
         //if (unrecognized_key_callback_func)
         //{
            //item_handled = unrecognized_key_callback_func();
         //}

         if (!item_handled)
         {
            // item not found
            std::stringstream error_message;
            error_message << "[Pipeline::GameConfigurations::Main::load_level]: error: Cannot load the item with the identifier \""
                          << identifier << "\", it does not exist.";
            throw std::runtime_error(error_message.str());
         }
      }
      else
      {
         // call the item
         items_map[identifier]();
      }

      return result;
    body_dependency_symbols:
     - Pipeline::Gameplay::Level
     - std::function
     - std::stringstream
     - std::map


dependencies:


  - symbol: AllegroFlare::GameConfigurations::Base
    headers: [ AllegroFlare/GameConfigurations/Base.hpp ]
  - symbol: AllegroFlare::Levels::Base
    headers: [ AllegroFlare/Levels/Base.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBankFactory
    headers: [ AllegroFlare/DialogTree/NodeBankFactory.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::Wait
    headers: [ AllegroFlare/DialogTree/Nodes/Wait.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::ExitProgram
    headers: [ AllegroFlare/DialogTree/Nodes/ExitProgram.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::MultipageWithOptions
    headers: [ AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::GoToNode
    headers: [ AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::ExitDialog
    headers: [ AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp ]

  - symbol: Pipeline::Gameplay::Level
    headers: [ Pipeline/Gameplay/Level.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


