properties:


  - name: camera_start
    type: AllegroFlare::Camera3D
    init_with: '{}'
    getter: true
    getter_ref: true
    setter: true

  - name: camera_end
    type: AllegroFlare::Camera3D
    init_with: '{}'
    getter: true
    getter_ref: true
    setter: true

  - name: started_at
    type: float
    init_with: 0.0f
    getter: true
    setter: true

  - name: end_at
    type: float
    init_with: 1.0f
    getter: true
    setter: true

  - name: position
    type: float
    init_with: 0.5f
    getter: true
    setter: true

  - name: time_now
    type: bool
    init_with: false
    getter: true
    setter: true


methods:


  - name: update
    type: AllegroFlare::Camera3D
    body: |
      AllegroFlare::Camera3D result = camera_start;
      float normal = normalize_age(started_at, end_at, time_now);

      if (normal <= 0.0) return camera_start;
      if (normal >= 1.0) return camera_end;

      result.near_plane = interpolate(camera_start.near_plane, camera_end.near_plane, normal);
      result.far_plane = interpolate(camera_start.far_plane, camera_end.far_plane, normal);
      result.position = interpolate_vec3d(camera_start.position, camera_end.position, normal);
      result.stepout = interpolate_vec3d(camera_start.stepout, camera_end.stepout, normal);
      result.spin = interpolate(camera_start.spin, camera_end.spin, normal);
      result.tilt = interpolate(camera_start.tilt, camera_end.tilt, normal);
      result.roll = interpolate(camera_start.roll, camera_end.roll, normal);
      result.zoom = interpolate(camera_start.zoom, camera_end.zoom, normal);

      //AllegroFlare::Camera3D

      // camera and viewport settings
      //float near_plane;
      //float far_plane;

      // camera controls
      //AllegroFlare::Vec3D position;
      //AllegroFlare::Vec3D stepout;
      //float spin;
      //float tilt;
      //float roll;
      //float zoom;
      return result;


  - name: normalize_age
    static: true
    type: float
    parameters:
      - name: start_time
        type: float
        default_argument: 0.0f
      - name: end_time
        type: float
        default_argument: 0.0f
      - name: time_now
        type: float
        default_argument: 0.0f
    body: |
      // TODO: Consider that capping to 1.0 if past may not be preferred
      float length = (end_time - start_time);
      float time_now_in_range = time_now - start_time;
      if (length == 0.0f) return 0.0f;
      if (time_now_in_range >= length) return 1.0f;
      return time_now_in_range / length;


  - name: strobe
    static: true
    type: bool
    parameters:
      - name: start_time
        type: float
        default_argument: 0.0f
      - name: time_now
        type: float
        default_argument: 0.0f
      - name: strobes_per_second
        type: float
        default_argument: 10.0f
    body: |
      float strobe_frequency = 1.0 / strobes_per_second;
      float age = (time_now - start_time);
      return (fmod(age, strobe_frequency) < (strobe_frequency * 0.5));
    body_dependency_symbols:
      - fmod


  - name: smooth_strobe
    static: true
    type: bool
    parameters:
      - name: start_time
        type: float
        default_argument: 0.0f
      - name: time_now
        type: float
        default_argument: 0.0f
      - name: strobes_per_second
        type: float
        default_argument: 10.0f
    body: |
      // TODO: Update this method to actually be smooth (it's a copy of "strobe")
      float strobe_frequency = 1.0 / strobes_per_second;
      float age = (time_now - start_time);
      return (fmod(age, strobe_frequency) < (strobe_frequency * 0.5));
    body_dependency_symbols:
      - fmod


  - name: age
    static: true
    type: float
    parameters:
      - name: start_time
        type: float
        default_argument: 0.0f
      - name: end_time
        type: float
        default_argument: 0.0f
    body: |
      return (end_time - start_time);


  - name: interpolate
    static: true
    type: float
    parameters:
      - name: start_value
        type: float
        default_argument: 0.0f
      - name: end_value
        type: float
        default_argument: 0.0f
      - name: normalized_float
        type: float
        default_argument: 0.0f
    body: |
      return start_value + (normalized_float * (end_value - start_value));


  - name: interpolate_vec3d
    static: true
    type: AllegroFlare::Vec3D
    parameters:
      - name: start
        type: AllegroFlare::Vec3D
        default_argument: '{}'
      - name: end
        type: AllegroFlare::Vec3D
        default_argument: '{}'
      - name: normalized_float
        type: float
        default_argument: 0.0f
    body: |
      AllegroFlare::Vec3D result;
      result.x = interpolate(start.x, end.x, normalized_float);
      result.y = interpolate(start.y, end.y, normalized_float);
      result.z = interpolate(start.z, end.z, normalized_float);
      return result;


dependencies:


  - symbol: fmod
    headers: [ cmath ]
  - symbol: AllegroFlare::Camera3D
    headers: [ AllegroFlare/Camera3D.hpp ]
  - symbol: AllegroFlare::Vec3D
    headers: [ AllegroFlare/Vec3D.hpp ]


