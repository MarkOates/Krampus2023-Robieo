properties:


  - name: entity_pool
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: explicit

  - name: data_path_for_shaders
    type: std::string
    init_with: '""'
    getter: true
    setter: explicit

  - name: shadow_mapping_shader
    type: AllegroFlare::Shaders::ShadowMapping
    init_with: ''

  - name: shadow_depth_map_surface_width
    type: int
    init_with: 1920
    getter: true
    setter: explicit

  - name: shadow_depth_map_surface_height
    type: int
    init_with: 1080
    getter: true
    setter: explicit

  - name: shadow_depth_map_renderer
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowDepthMapRenderer2
    init_with: ''
    getter_ref: true

  - name: result_surface_width
    type: int
    init_with: 1920
    getter: true
    setter: explicit

  - name: result_surface_height
    type: int
    init_with: 1080
    getter: true
    setter: explicit

  - name: result_surface
    type: AllegroFlare::RenderSurfaces::Bitmap
    init_with: ''
    getter_ref: true
    getter: false
    setter: false

  - name: initialized
    type: bool
    init_with: false


methods:


  - name: set_entity_pool
    parameters:
      - name: entity_pool
        type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool*
        default_argument: nullptr
    body: |
      this->entity_pool = entity_pool;
      shadow_depth_map_renderer.set_entity_pool(entity_pool);
      // TODO: Test guard
      //this->result_surface_width = result_surface_width;
      return;


  - name: set_data_path_for_shaders
    parameters:
      - name: data_path_for_shaders
        type: std::string
        default_argument: '"[unset-data_path_for_shaders]"'
    guards: [ (!initialized) ]
    body: |
      this->data_path_for_shaders = data_path_for_shaders;
      return;


  - name: set_shadow_depth_map_surface_width
    parameters:
      - name: width
        type: int
        default_argument: 1920
    guards: [ (!initialized), (width >= 320) ]
    body: |
      // TODO: Test guard
      this->shadow_depth_map_surface_width = width;
      return;


  - name: set_shadow_depth_map_surface_height
    parameters:
      - name: height
        type: int
        default_argument: 1920
    guards: [ (!initialized), (height >= 320) ]
    body: |
      // TODO: Test guard
      this->shadow_depth_map_surface_height = height;
      return;


  - name: set_result_surface_width
    parameters:
      - name: width
        type: int
        default_argument: 1920
    guards: [ (!initialized), (width >= 320) ]
    body: |
      // TODO: Test guard
      this->result_surface_width = width;
      return;


  - name: set_result_surface_height
    parameters:
      - name: height
        type: int
        default_argument: 1080
    guards: [ (!initialized), (height >= 240) ]
    body: |
      // TODO: Test guard
      this->result_surface_height = height;
      return;


  - name: get_light
    type: AllegroFlare::Camera3D*
    body: |
      return &get_shadow_depth_map_renderer_ref().get_casting_light_ref();


  - name: get_result_bitmap
    type: ALLEGRO_BITMAP*
    guards: [ initialized ]
    body: |
      return result_surface.obtain_surface();
      //return &get_shadow_depth_map_renderer_ref().get_casting_light_ref();


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      shadow_depth_map_renderer.setup_result_surface_bitmap(
         shadow_depth_map_surface_width, 
         shadow_depth_map_surface_height
      );
      shadow_depth_map_renderer.set_data_path_for_shaders(data_path_for_shaders);
      shadow_depth_map_renderer.init_shader();
      shadow_depth_map_renderer.set_entity_pool(entity_pool);
      shadow_depth_map_renderer.init_camera_defaults(); // NOTE: The camera defaults seem to be weird

      shadow_mapping_shader.set_data_path_for_shaders(data_path_for_shaders);
      shadow_mapping_shader.initialize();

      result_surface.set_surface_width(result_surface_width);
      result_surface.set_surface_height(result_surface_height);
      result_surface.set_multisamples(0);
      result_surface.set_depth(32);
      result_surface.initialize();

      initialized = true;

      // TODO: Add a teardown

      return;


  - name: render
    guards: [ initialized, entity_pool ]
    body: |
      AllegroFlare::Camera3D *primary_camera = find_primary_camera_3d();

      // Draw the shadow_depth_map_render
      //if (shadow_depth_map_renderer)
      //{
         shadow_depth_map_renderer.render();
      //}


      using namespace AllegroFlare::GraphicsPipelines::DynamicEntityPipeline;

      ALLEGRO_BITMAP *result_surface_bmp = result_surface.obtain_surface();

      al_set_target_bitmap(result_surface_bmp);


      al_clear_depth_buffer(1);
      //al_clear_to_color(ALLEGRO_COLOR{0.1, 0.105, 0.12, 1.0});
      al_clear_to_color(ALLEGRO_COLOR{0.98 - 0.005, 0.986 - 0.005, 0.99 - 0.005, 1.0}); // NOTE This is only a non-white
                                                                                        // color to make it a little
                                                                                        // easier for debugging

      primary_camera->setup_projection_on(result_surface_bmp);





      // Activate the shader
      shadow_mapping_shader.activate();

      // Obtain our shadow_depth_map_render texture and light position
      ALLEGRO_BITMAP *shadow_depth_map_render = shadow_depth_map_renderer.get_result_surface_bitmap();
      AllegroFlare::Camera3D &light = shadow_depth_map_renderer.get_casting_light_ref();
      ALLEGRO_TRANSFORM transform;
      shadow_depth_map_renderer.setup_transform_for_light(&transform);

      // Set the uniforms on the shader
      shadow_mapping_shader.set_sampler("me__depth_pass_sampler", shadow_depth_map_render, 0);
      shadow_mapping_shader.set_mat4("me__depth_pass_transform", &transform);





      // Set the camera position in the iridescent shder
      //cubemap_shader->set_camera_position(primary_camera->get_real_position());

      for (auto &entity : entity_pool->get_entity_pool_ref())
      {
         // TODO: Rename legacy "as_agc_entity" to something more appropriate
         Entities::Base *as_agc_entity = static_cast<Entities::Base*>(entity);
         // Skip if entity is flagged as "do not render"
         // TODO: Add test for this case
         if (as_agc_entity->exists(EntityRenderFlags::DO_NOT_RENDER)) continue;
         

         ALLEGRO_TRANSFORM object_transform;

         //al_identity_transform(&object_transform);
         //shadow_mapping_shader->set_mat4("me__object_position_transform", &object_transform);


         // Extract the model type that is being rendered
         AllegroFlare::Model3D *model = get_model_3d(as_agc_entity);
         //AllegroFlare::MultitextureModel3D *multitexture_model_3d = nullptr;

         if (model)
         {
            AllegroFlare::Placement3D *placement = get_placement_3d(as_agc_entity);
            if (!placement) continue; // TODO: Test this line

            // Collect render flags
            //bool renders_with_iridescent = as_agc_entity->exists(EntityRenderFlags::RENDER_WITH_SKYBOX);

            // Pass along the transform to the shader
            placement->build_transform(&object_transform);
            shadow_mapping_shader.set_mat4("me__object_position_transform", &object_transform);

            // Draw the model (make sure the texture is nullptr, because the depth_pass_sampler is using unit 0)
            model->set_texture(nullptr);
            model->draw();
         }
         else if (get_multitexture_model_3d(as_agc_entity))
         {
            AllegroFlare::Logger::throw_error(
               "AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowMapBuffer::render",
               "models of type Multitexture3D are nor supported at this point in the pipeline. Please consider using "
                  "a DynamicModel3D instead."
            );
         }
         else
         {
            // Other objects may pass through here, like the camera or 2D maps, other DynamicEntityPipelin entity types
         }
      }

      shadow_mapping_shader.deactivate();

      return;
    body_dependency_symbols:
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Camera3D


  - name: find_primary_camera_3d
    type: AllegroFlare::Camera3D*
    body: |
      Entities::Base *entity = entity_pool->find_with_attribute("primary_camera");
      if (!entity)
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowMapBuffer::primary_camera_3d",
            "no camera present"
         );
      }
      // TODO: validate the camera is of type Entities::Camera
      Entities::Camera3D *as_camera = static_cast<Entities::Camera3D*>(entity);
      return &as_camera->get_camera_3d_ref();
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: get_multitexture_model_3d
    type: AllegroFlare::MultitextureModel3D*
    parameters:
      - name: entity
        type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*
        default_argument: nullptr
    guards: [ entity ]
    body: |
      using namespace AllegroFlare::GraphicsPipelines::DynamicEntityPipeline;

      // TODO: Optimize this lookup
      // TODO: Consider throw on unhandled type
      if (entity->is_type(Entities::StaticMultitextureModel3D::TYPE))
      {
         Entities::StaticMultitextureModel3D *as_casted = static_cast<Entities::StaticMultitextureModel3D*>(entity);
         return as_casted->get_multitexture_model_3d();
      }
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D
   

  - name: get_model_3d
    type: AllegroFlare::Model3D*
    parameters:
      - name: entity
        type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*
        default_argument: nullptr
    guards: [ entity ]
    body: |
      // TODO: Optimize this lookup
      // TODO: Consider throw on unhandled type
      if (entity->is_type(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D::TYPE))
      {
         Entities::DynamicModel3D *as_casted = static_cast<Entities::DynamicModel3D*>(entity);
         return as_casted->get_model_3d();
      }
      else if (entity->is_type(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D::TYPE))
      {
         Entities::StaticModel3D *as_casted = static_cast<Entities::StaticModel3D*>(entity);
         return as_casted->get_model_3d();
      }
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D
   

  - name: get_placement_3d
    type: AllegroFlare::Placement3D*
    parameters:
      - name: entity
        type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*
        default_argument: nullptr
    guards: [ entity ]
    body: |
      // TODO: Optimize this lookup
      // TODO: Consider throw on unhandled type
      if (entity->is_type(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D::TYPE))
      {
         Entities::DynamicModel3D *as_casted = static_cast<Entities::DynamicModel3D*>(entity);
         return &as_casted->get_placement_ref();
      }
      else if (entity->is_type(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D::TYPE))
      {
         Entities::StaticModel3D *as_casted = static_cast<Entities::StaticModel3D*>(entity);
         return &as_casted->get_placement_ref();
      }
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D
   

  - name: get_texture
    type: ALLEGRO_BITMAP*
    parameters:
      - name: entity
        type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*
        default_argument: nullptr
    guards: [ entity ]
    body: |
      using namespace AllegroFlare::GraphicsPipelines::DynamicEntityPipeline;

      // TODO: Optimize this lookup
      // TODO: Consider throw on unhandled type
      if (entity->is_type(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D::TYPE))
      {
         Entities::DynamicModel3D *as_casted = static_cast<Entities::DynamicModel3D*>(entity);
         return as_casted->get_model_3d_texture();
      }
      else if (entity->is_type(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D::TYPE))
      {
         Entities::StaticModel3D *as_casted = static_cast<Entities::StaticModel3D*>(entity);
         return as_casted->get_model_3d_texture();
      }
      if (entity->is_type(Entities::StaticMultitextureModel3D::TYPE))
      {
         Entities::StaticMultitextureModel3D *as_casted = static_cast<Entities::StaticMultitextureModel3D*>(entity);
         return as_casted->get_multitexture_model_3d_texture_1();
      }
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D
   

  - name: get_texture_2
    type: ALLEGRO_BITMAP*
    parameters:
      - name: entity
        type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*
        default_argument: nullptr
    guards: [ entity ]
    body: |
      using namespace AllegroFlare::GraphicsPipelines::DynamicEntityPipeline;

      // TODO: Optimize this lookup
      // TODO: Consider throw on unhandled type
      if (entity->is_type(Entities::StaticMultitextureModel3D::TYPE))
      {
         Entities::StaticMultitextureModel3D *as_casted = static_cast<Entities::StaticMultitextureModel3D*>(entity);
         return as_casted->get_multitexture_model_3d_texture_2();
      }
      //else if (entity->is_type(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D::TYPE))
      //{
         //Entities::StaticModel3D *as_casted = static_cast<Entities::StaticModel3D*>(entity);
         //return as_casted->get_model_3d_texture();
      //}
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D
   

dependencies:


  - symbol: AllegroFlare::Placement3D
    headers: [ AllegroFlare/Placement3D.hpp ]
  - symbol: AllegroFlare::Model3D
    headers: [ AllegroFlare/Model3D.hpp ]
  - symbol: AllegroFlare::Camera3D
    headers: [ AllegroFlare/Camera3D.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Camera3D
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.hpp ]
  - symbol: AllegroFlare::MultitextureModel3D
    headers: [ AllegroFlare/MultitextureModel3D.hpp ]
  - symbol: AllegroFlare::Shaders::Cubemap
    headers: [ AllegroFlare/Shaders/Cubemap.hpp ]
  - symbol: AllegroFlare::Shaders::Multitexture
    headers: [ AllegroFlare/Shaders/Multitexture.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags.hpp ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowDepthMapRenderer2
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::RenderSurfaces::Bitmap
    headers: [ AllegroFlare/RenderSurfaces/Bitmap.hpp ]
  - symbol: AllegroFlare::Shaders::ShadowMapping
    headers: [ AllegroFlare/Shaders/ShadowMapping.hpp ]


