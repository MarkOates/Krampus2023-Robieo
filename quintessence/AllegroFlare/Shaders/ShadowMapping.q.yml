parent_classes:


  - class: AllegroFlare::Shaders::Base
    scope: public
    init_with: "AllegroFlare::Shaders::ShadowMapping::TYPE"


properties:


  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Shaders/ShadowMapping"'
    static: true
    constexpr: true

  - name: vertex_source_filename
    type: char*
    init_with: '(char*)"/Users/markoates/Repos/Pipeline/tests/fixtures/shaders/simple_map_vertex_with_light.glsl"'
    static: true
    constexpr: true

  - name: fragment_source_filename
    type: char*
    init_with: '(char*)"/Users/markoates/Repos/Pipeline/tests/fixtures/shaders/simple_map_fragment_with_light.glsl"'
    static: true
    constexpr: true

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    type: void
    body: |
      set_vertex_source_code(obtain_vertex_source());
      set_fragment_source_code(obtain_fragment_source());
      if (!initialized) AllegroFlare::Shaders::Base::initialize();
      initialized = true;


  - name: activate
    type: void
    guards: [ initialized ]
    body: |
      AllegroFlare::Shaders::Base::activate();


  - name: obtain_vertex_source
    type: std::string
    static: true
    private: true
    xguards: [ std::filesystem::exists(vertex_source_filename) ]
    body: |
      std::cout << "######" << vertex_source_filename << "######" << std::endl;
      //std::cout << "######" << std::filesystem::exists(vertex_source_filename) << "######" << std::endl;
      //std::string filename_fragment =
         //"/Users/markoates/Repos/allegro_flare/bin/data/shaders/simple_map_fragment_with_light.glsl";
      //std::string filename_vertex =
         //"/Users/markoates/Repos/allegro_flare/bin/data/shaders/simple_map_vertex_with_light.glsl";
      return AllegroFlare::php::file_get_contents(vertex_source_filename);

      static const std::string source = R"DELIM(
        attribute vec4 al_pos;
        attribute vec4 al_color;
        attribute vec2 al_texcoord;
        uniform mat4 al_projview_matrix;
        uniform bool al_use_tex_matrix;
        uniform mat4 al_tex_matrix;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;
        void main()
        {
          varying_color = al_color;
          if (al_use_tex_matrix) {
            vec4 uv = al_tex_matrix * vec4(al_texcoord, 0, 1);
            varying_texcoord = vec2(uv.x, uv.y);
          }
          else
            varying_texcoord = al_texcoord;
          gl_Position = al_projview_matrix * al_pos;
        }
      )DELIM";
      return source;
    body_dependency_symbols:
      - std::filesystem
      - AllegroFlare::UsefulPHP


  - name: obtain_fragment_source
    type: std::string
    static: true
    private: true
    guards: [ std::filesystem::exists(fragment_source_filename) ]
    body: |
      //std::string filename_fragment =
         //"/Users/markoates/Repos/allegro_flare/bin/data/shaders/simple_map_fragment_with_light.glsl";
      //std::string filename_vertex =
         //"/Users/markoates/Repos/allegro_flare/bin/data/shaders/simple_map_vertex_with_light.glsl";
      return AllegroFlare::php::file_get_contents(fragment_source_filename);

      static const std::string source = R"DELIM(
        #ifdef GL_ES
        precision lowp float;
        #endif
        uniform sampler2D al_tex;
        uniform bool al_use_tex;
        uniform bool al_alpha_test;
        uniform int al_alpha_func;
        uniform float al_alpha_test_val;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;

        bool alpha_test_func(float x, int op, float compare);

        void main()
        {
          vec4 c;
          if (al_use_tex)
            c = varying_color * texture2D(al_tex, varying_texcoord);
          else
            c = varying_color;
          if (!al_alpha_test || alpha_test_func(c.a, al_alpha_func, al_alpha_test_val))
            gl_FragColor = c;
          else
            discard;
        }

        bool alpha_test_func(float x, int op, float compare)
        {
          if (op == 0) return false;
          else if (op == 1) return true;
          else if (op == 2) return x < compare;
          else if (op == 3) return x == compare;
          else if (op == 4) return x <= compare;
          else if (op == 5) return x > compare;
          else if (op == 6) return x != compare;
          else if (op == 7) return x >= compare;
          return false;
        }
      )DELIM";
      return source;
    body_dependency_symbols:
      - std::filesystem
      - AllegroFlare::UsefulPHP


dependencies:


  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::UsefulPHP
    headers: [ AllegroFlare/UsefulPHP.hpp ]


