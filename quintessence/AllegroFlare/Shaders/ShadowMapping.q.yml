parent_classes:


  - class: AllegroFlare::Shaders::Base
    scope: public
    init_with: "AllegroFlare::Shaders::ShadowMapping::TYPE"


properties:


  - name: data_path_for_shaders
    type: std::string
    init_with: '""'
    xinit_with: '(char*)"/Users/markoates/Repos/Pipeline/tests/fixtures/shaders/"'
    getter: true
    setter: true

  - name: vertex_source_filename
    type: char*
    init_with: '(char*)"start_vertex.glsl"'
    static: true
    constexpr: true

  - name: fragment_source_filename
    type: char*
    init_with: '(char*)"start_fragment.glsl"'
    static: true
    constexpr: true

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Shaders/ShadowMapping"'
    static: true
    constexpr: true


functions:


  - name: full_path_to_vertex_source_file
    type: std::string
    guards: [ (!data_path_for_shaders.empty()) ]
    body: |
      return data_path_for_shaders + std::string(vertex_source_filename);


  - name: full_path_to_fragment_source_file
    type: std::string
    guards: [ (!data_path_for_shaders.empty()) ]
    body: |
      return data_path_for_shaders + std::string(fragment_source_filename);


  - name: initialize
    type: void
    body: |
      set_vertex_source_code(obtain_vertex_source());
      set_fragment_source_code(obtain_fragment_source());

      if (!initialized) AllegroFlare::Shaders::Base::initialize();
      initialized = true;


  - name: activate
    type: void
    guards: [ initialized ]
    body: |
      AllegroFlare::Shaders::Base::activate();


  - name: obtain_vertex_source
    type: std::string
    xstatic: true
    private: true
    xguards: [ 'std::filesystem::exists(full_path_to_vertex_source_file())' ]
    body: |
      if (!std::filesystem::exists(full_path_to_vertex_source_file()))
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::Shaders::ShadowMapping::obtain_vertex_source",
            "Could not load file \"" + full_path_to_vertex_source_file() + "\""
         );
      }
      return AllegroFlare::php::file_get_contents(full_path_to_vertex_source_file());
    body_dependency_symbols:
      - std::filesystem
      - AllegroFlare::UsefulPHP
      - AllegroFlare::Logger


  - name: obtain_fragment_source
    type: std::string
    xstatic: true
    private: true
    xguards: [ 'std::filesystem::exists(full_path_to_fragment_source_file())' ]
    body: |
      if (!std::filesystem::exists(full_path_to_fragment_source_file()))
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::Shaders::ShadowMapping::obtain_fragment_source",
            "Could not load file \"" + full_path_to_fragment_source_file() + "\""
         );
      }
      return AllegroFlare::php::file_get_contents(full_path_to_fragment_source_file());
    body_dependency_symbols:
      - std::filesystem
      - AllegroFlare::UsefulPHP


dependencies:


  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::UsefulPHP
    headers: [ AllegroFlare/UsefulPHP.hpp ]


