<!DOCTYPE html>
<head>
<style>
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}

.method
{
  color: red;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: green;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #dfdfdf;
}

.component h3
{
}
</style>
</head>
<body>
<h1>Table of Contents</h1>
<ul>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/ShadowMapping.q.yml">quintessence/AllegroFlare/Shaders/ShadowMapping.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.q.yml">quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionStepper.q.yml">quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionStepper.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/BasicRenderer.q.yml">quintessence/LabyrinthOfLore/WorldMap/BasicRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/BitmapTileMapLoader.q.yml">quintessence/LabyrinthOfLore/WorldMap/BitmapTileMapLoader.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder.q.yml">quintessence/LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader.q.yml">quintessence/LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/Tile.q.yml">quintessence/LabyrinthOfLore/WorldMap/Tile.q.yml</a></li>
  <li><a href="#quintessence/Pipeline/CSVToLevelLoader.q.yml">quintessence/Pipeline/CSVToLevelLoader.q.yml</a></li>
  <li><a href="#quintessence/Pipeline/CurrentFloorInferencer.q.yml">quintessence/Pipeline/CurrentFloorInferencer.q.yml</a></li>
  <li><a href="#quintessence/Pipeline/DialogNodeBankFactory.q.yml">quintessence/Pipeline/DialogNodeBankFactory.q.yml</a></li>
  <li><a href="#quintessence/Pipeline/GameConfigurations/Main.q.yml">quintessence/Pipeline/GameConfigurations/Main.q.yml</a></li>
  <li><a href="#quintessence/Pipeline/GameProgressAndStateInfo.q.yml">quintessence/Pipeline/GameProgressAndStateInfo.q.yml</a></li>
  <li><a href="#quintessence/Pipeline/Gameplay/Level.q.yml">quintessence/Pipeline/Gameplay/Level.q.yml</a></li>
  <li><a href="#quintessence/Pipeline/Gameplay/Screen.q.yml">quintessence/Pipeline/Gameplay/Screen.q.yml</a></li>
  <li><a href="#quintessence/Pipeline/Physics/GravityStepper.q.yml">quintessence/Pipeline/Physics/GravityStepper.q.yml</a></li>
  <li><a href="#quintessence/Pipeline/Runner.q.yml">quintessence/Pipeline/Runner.q.yml</a></li>
</ul>
<h1>Components</h1>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool*</td>
</tr>
<tr>
  <td class="property">data_path_for_shaders</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">depth_map_shader</td>
  <td class="property">AllegroFlare::Shaders::Base*</td>
</tr>
<tr>
  <td class="property">casting_light</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">render_surface</td>
  <td class="property">AllegroFlare::RenderSurfaces::Bitmap</td>
</tr>
<tr>
  <td class="property">render_surface_is_setup</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">shader_is_initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_DATA_PATH_FOR_SHADERS</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_data_path_for_shaders(std::string data_path_for_shaders=DEFAULT_DATA_PATH_FOR_SHADERS)</td>
</tr>
<tr>
  <td class="method">get_result_surface_bitmap()</td>
</tr>
<tr>
  <td class="method">setup_result_surface_bitmap(int width=1920, int height=1080)</td>
</tr>
<tr>
  <td class="method">data_path_for_shaders_is_default()</td>
</tr>
<tr>
  <td class="method">init_shader()</td>
</tr>
<tr>
  <td class="method">init_camera_defaults()</td>
</tr>
<tr>
  <td class="method">destroy()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">setup_projection_on_render_surface()</td>
</tr>
<tr>
  <td class="method">get_multitexture_model_3d(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">render_multitexture_model_3d(AllegroFlare::MultitextureModel3D* multitexture_model_3d=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;glEnable&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_opengl.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AllegroUnstable&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AllegroUnstable.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RenderSurfaces::Bitmap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RenderSurfaces/Bitmap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">cubemap_shader</td>
  <td class="property">AllegroFlare::Shaders::Cubemap</td>
</tr>
<tr>
  <td class="property">multitexture_shader</td>
  <td class="property">AllegroFlare::Shaders::Multitexture</td>
</tr>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool*</td>
</tr>
<tr>
  <td class="property">data_path_for_shaders</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">shadow_map_buffer</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowMapBuffer</td>
</tr>
<tr>
  <td class="property">render_surface</td>
  <td class="property">AllegroFlare::RenderSurfaces::Bitmap</td>
</tr>
<tr>
  <td class="property">render_surface_is_setup</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">cubemapping_is_setup</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">multitexture_shader_is_setup</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">shadow_map_buffer_is_setup</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_data_path_for_shaders(std::string data_path_for_shaders=&quot;[unset-data_path_for_shaders]&quot;)</td>
</tr>
<tr>
  <td class="method">setup_result_surface_bitmap(int width=1920, int height=1080)</td>
</tr>
<tr>
  <td class="method">setup_shadow_map_buffer()</td>
</tr>
<tr>
  <td class="method">setup_cubemapping(std::string cube_map_texture_filename=&quot;[unset-cube_map_texture_filename]&quot;)</td>
</tr>
<tr>
  <td class="method">setup_multitexture_shader()</td>
</tr>
<tr>
  <td class="method">find_primary_camera_3d()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">get_multitexture_model_3d(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">get_model_3d(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">get_placement_3d(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">get_texture(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">get_texture_2(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Cubemap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Cubemap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Multitexture&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Multitexture.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowDepthMapRenderer2&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RenderSurfaces::Bitmap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RenderSurfaces/Bitmap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowMapBuffer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CubemapBuilder&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CubemapBuilder.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool*</td>
</tr>
<tr>
  <td class="property">data_path_for_shaders</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">depth_map_shader</td>
  <td class="property">AllegroFlare::Shaders::Base*</td>
</tr>
<tr>
  <td class="property">casting_light</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">render_surface</td>
  <td class="property">AllegroFlare::RenderSurfaces::Bitmap</td>
</tr>
<tr>
  <td class="property">render_surface_is_setup</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">shader_is_initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_DATA_PATH_FOR_SHADERS</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_data_path_for_shaders(std::string data_path_for_shaders=DEFAULT_DATA_PATH_FOR_SHADERS)</td>
</tr>
<tr>
  <td class="method">get_result_surface_bitmap()</td>
</tr>
<tr>
  <td class="method">data_path_for_shaders_is_default()</td>
</tr>
<tr>
  <td class="method">setup_result_surface_bitmap(int width=1920, int height=1080)</td>
</tr>
<tr>
  <td class="method">init_shader()</td>
</tr>
<tr>
  <td class="method">init_camera_defaults()</td>
</tr>
<tr>
  <td class="method">destroy()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">setup_transform_for_light(ALLEGRO_TRANSFORM* transform=nullptr)</td>
</tr>
<tr>
  <td class="method">setup_projection_on_render_surface()</td>
</tr>
<tr>
  <td class="method">get_multitexture_model_3d(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">render_multitexture_model_3d(AllegroFlare::MultitextureModel3D* multitexture_model_3d=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;glEnable&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_opengl.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AllegroUnstable&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AllegroUnstable.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RenderSurfaces::Bitmap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RenderSurfaces/Bitmap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool*</td>
</tr>
<tr>
  <td class="property">data_path_for_shaders</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">shadow_mapping_shader</td>
  <td class="property">AllegroFlare::Shaders::ShadowMapping</td>
</tr>
<tr>
  <td class="property">shadow_depth_map_surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">shadow_depth_map_surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">shadow_depth_map_renderer</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowDepthMapRenderer2</td>
</tr>
<tr>
  <td class="property">result_surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">result_surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">result_surface</td>
  <td class="property">AllegroFlare::RenderSurfaces::Bitmap</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_entity_pool(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool* entity_pool=nullptr)</td>
</tr>
<tr>
  <td class="method">set_data_path_for_shaders(std::string data_path_for_shaders=&quot;[unset-data_path_for_shaders]&quot;)</td>
</tr>
<tr>
  <td class="method">set_shadow_depth_map_surface_width(int width=1920)</td>
</tr>
<tr>
  <td class="method">set_shadow_depth_map_surface_height(int height=1920)</td>
</tr>
<tr>
  <td class="method">set_result_surface_width(int width=1920)</td>
</tr>
<tr>
  <td class="method">set_result_surface_height(int height=1080)</td>
</tr>
<tr>
  <td class="method">get_light()</td>
</tr>
<tr>
  <td class="method">get_result_bitmap()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">find_primary_camera_3d()</td>
</tr>
<tr>
  <td class="method">get_multitexture_model_3d(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">get_model_3d(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">get_placement_3d(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">get_texture(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">get_texture_2(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Cubemap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Cubemap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Multitexture&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Multitexture.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowDepthMapRenderer2&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RenderSurfaces::Bitmap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RenderSurfaces/Bitmap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::ShadowMapping&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/ShadowMapping.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/ShadowMapping.q.yml">quintessence/AllegroFlare/Shaders/ShadowMapping.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">data_path_for_shaders</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">vertex_source_filename</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">fragment_source_filename</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">full_path_to_vertex_source_file()</td>
</tr>
<tr>
  <td class="method">full_path_to_fragment_source_file()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.q.yml">quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D*</td>
</tr>
<tr>
  <td class="property">tile_type</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_face_collided_with</td>
  <td class="property">LabyrinthOfLore::WorldMap::tile_face_t</td>
</tr>
<tr>
  <td class="property">force</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::tile_face_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileFaceEnum.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionStepper.q.yml">quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionStepper.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap*</td>
</tr>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D*&gt;</td>
</tr>
<tr>
  <td class="property">floor_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">auto_ascend_threshold</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">offset_at_collision_edge</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">events_from_last_processed_step</td>
  <td class="property">std::vector&lt;LabyrinthOfLore::Physics::EntityTileMapCollisionEvent&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">process_step()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fabs&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::tile_face_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileFaceEnum.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Physics::EntityTileMapCollisionEvent&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Physics::EntityTileMapCollisionEvent&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/BasicRenderer.q.yml">quintessence/LabyrinthOfLore/WorldMap/BasicRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap*</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::Tile&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/Tile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_primitives_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileTypeEnum&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileTypeEnum.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/BitmapTileMapLoader.q.yml">quintessence/LabyrinthOfLore/WorldMap/BitmapTileMapLoader.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">source_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">colors_are_equal(ALLEGRO_COLOR c1={}, ALLEGRO_COLOR c2={})</td>
</tr>
<tr>
  <td class="method">get_index_column_x()</td>
</tr>
<tr>
  <td class="method">infer_tile_map_width()</td>
</tr>
<tr>
  <td class="method">infer_tile_map_height()</td>
</tr>
<tr>
  <td class="method">pick_color(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">pick_index_null_color()</td>
</tr>
<tr>
  <td class="method">pick_index_top_color()</td>
</tr>
<tr>
  <td class="method">pick_index_ground_color()</td>
</tr>
<tr>
  <td class="method">pick_index_gp_color()</td>
</tr>
<tr>
  <td class="method">pick_index_gpp_color()</td>
</tr>
<tr>
  <td class="method">pick_index_gppp_color()</td>
</tr>
<tr>
  <td class="method">pick_index_g1_color()</td>
</tr>
<tr>
  <td class="method">pick_index_gm_color()</td>
</tr>
<tr>
  <td class="method">pick_index_gmm_color()</td>
</tr>
<tr>
  <td class="method">pick_index_gmmm_color()</td>
</tr>
<tr>
  <td class="method">pick_index_gm1_color()</td>
</tr>
<tr>
  <td class="method">pick_index_g1p_color()</td>
</tr>
<tr>
  <td class="method">pick_index_g1pp_color()</td>
</tr>
<tr>
  <td class="method">pick_index_g1ppp_color()</td>
</tr>
<tr>
  <td class="method">pick_index_g2_color()</td>
</tr>
<tr>
  <td class="method">validate()</td>
</tr>
<tr>
  <td class="method">load(float ceiling_height=4.0f, float ground_height=2.0f, float floor_height=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder.q.yml">quintessence/LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">elevation_bitmap_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_type_bitmap_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">ceiling_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">ground_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">floor_height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::BitmapTileMapLoader&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/BitmapTileMapLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::MultiBitmapTileMapLoader&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::Tile&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/Tile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_load_bitmap&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;, &quot;allegro5/allegro_image.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader.q.yml">quintessence/LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap*</td>
</tr>
<tr>
  <td class="property">source_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">colors_are_equal(ALLEGRO_COLOR c1={}, ALLEGRO_COLOR c2={})</td>
</tr>
<tr>
  <td class="method">get_index_column_x()</td>
</tr>
<tr>
  <td class="method">infer_tile_map_width()</td>
</tr>
<tr>
  <td class="method">infer_tile_map_height()</td>
</tr>
<tr>
  <td class="method">pick_color(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">pick_index_null_color()</td>
</tr>
<tr>
  <td class="method">pick_door_color()</td>
</tr>
<tr>
  <td class="method">pick_water_color()</td>
</tr>
<tr>
  <td class="method">pick_lava_color()</td>
</tr>
<tr>
  <td class="method">pick_glow_water_color()</td>
</tr>
<tr>
  <td class="method">validate()</td>
</tr>
<tr>
  <td class="method">load_and_process()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::tile_type_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileTypeEnum.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/Tile.q.yml">quintessence/LabyrinthOfLore/WorldMap/Tile.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Pipeline/CSVToLevelLoader.q.yml">quintessence/Pipeline/CSVToLevelLoader.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">csv_full_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">levels</td>
  <td class="property">std::map&lt;std::string, Pipeline::Gameplay::Level&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_levels()</td>
</tr>
<tr>
  <td class="method">level_exists(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">toi(std::string value=&quot;[unset-value]&quot;)</td>
</tr>
<tr>
  <td class="method">tof(std::string value=&quot;[unset-value]&quot;)</td>
</tr>
<tr>
  <td class="method">find_level(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">validate_key_and_return(std::map&lt;std::string, std::string&gt;* extracted_row=nullptr, std::string key=&quot;[unset-key]&quot;)</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CSVParser&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CSVParser.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;SurviveTheCity::CSVParser&quot;, &quot;headers&quot;=&gt;[&quot;SurviveTheCity/CSVParser.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::Gameplay::Level&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/Gameplay/Level.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::atoi&quot;, &quot;headers&quot;=&gt;[&quot;cstdlib&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stof&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Pipeline/CurrentFloorInferencer.q.yml">quintessence/Pipeline/CurrentFloorInferencer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">elevationMap</td>
  <td class="property">std::map&lt;int, float&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">find_closest_floor(float playerPosition=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::abs&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Pipeline/DialogNodeBankFactory.q.yml">quintessence/Pipeline/DialogNodeBankFactory.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">DIALOG_FOREST_NPC_LIKES_MUSHROOMS</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DIALOG_FOREST_NPC_COMPLETES_QUEST</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DIALOG_FOREST_NPC_QUEST_ALREADY_COMPLETE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build_production_game_node_bank()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::MultipageWithOptions&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitProgram&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitProgram.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::GoToNode&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::EmitGameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/EmitGameEvent.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Pipeline/GameConfigurations/Main.q.yml">quintessence/Pipeline/GameConfigurations/Main.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">data_folder</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">are_all_packages_delivered(std::set&lt;std::string&gt; delivered_package_identifiers={})</td>
</tr>
<tr>
  <td class="method">build_level_list_for_level_select_screen_by_identifier(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">build_level_db()</td>
</tr>
<tr>
  <td class="method">build_dialog_bank_by_identifier(std::string identifier=&quot;[identifier-discarded]&quot;)</td>
</tr>
<tr>
  <td class="method">load_level_by_identifier(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameConfigurations::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameConfigurations/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Levels::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Levels/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBankFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBankFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Wait&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Wait.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitProgram&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitProgram.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::MultipageWithOptions&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::GoToNode&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::Gameplay::Level&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/Gameplay/Level.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::CSVToLevelLoader&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/CSVToLevelLoader.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Pipeline/GameProgressAndStateInfo.q.yml">quintessence/Pipeline/GameProgressAndStateInfo.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">achievement_identifiers</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">delivered_package_identifiers</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">inventory_item_identifiers</td>
  <td class="property">std::multiset&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">completed_quest_identifiers</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">mark_achievement_as_unlocked(std::string achievement_identifier=&quot;[unset-achievement_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">mark_package_as_delivered(std::string delivered_package_identifier=&quot;[unset-delivered_package_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">mark_quest_as_completed(std::string completed_quest_identifier=&quot;[unset-completed_quest_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">add_item_to_inventory(std::string item_identifier=&quot;[unset-item_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">count_num_items_in_inventory_with_identifier(std::string item_identifier=&quot;[unset-item_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">is_quest_completed(std::string completed_quest_identifier=&quot;[unset-completed_quest_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">export_to_string()</td>
</tr>
<tr>
  <td class="method">import_from_string(std::string data_string=&quot;[unset-data_string]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::multiset&quot;, &quot;headers&quot;=&gt;[&quot;set&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::Base&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameProgressAndStateInfos::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameProgressAndStateInfos/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::JSONLoaders::Pipeline::GameProgressAndStateInfo&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/JSONLoaders/Pipeline/GameProgressAndStateInfo.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Pipeline/Gameplay/Level.q.yml">quintessence/Pipeline/Gameplay/Level.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">world_model_obj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">world_model_texture_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_map_tile_elevation_bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_map_tile_type_bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_map_origin_offset</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">tile_map_ceiling_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_map_groundlevel_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_map_floor_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">background_music_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">song_to_perform_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">song_to_perform_duration_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Levels::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Levels/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Pipeline/Gameplay/Screen.q.yml">quintessence/Pipeline/Gameplay/Screen.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">game_configuration</td>
  <td class="property">AllegroFlare::GameConfigurations::Base*</td>
</tr>
<tr>
  <td class="property">game_progress_and_state_info</td>
  <td class="property">Pipeline::GameProgressAndStateInfo*</td>
</tr>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool</td>
</tr>
<tr>
  <td class="property">player_controlled_entity</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*</td>
</tr>
<tr>
  <td class="property">player_control_velocity</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">player_control_dashing</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">goal_entity</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*</td>
</tr>
<tr>
  <td class="property">exit_entity</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*</td>
</tr>
<tr>
  <td class="property">scene_renderer</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::SceneRenderer2</td>
</tr>
<tr>
  <td class="property">show_map_overlay</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">current_level_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">current_level</td>
  <td class="property">Pipeline::Gameplay::Level*</td>
</tr>
<tr>
  <td class="property">current_level_tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap*</td>
</tr>
<tr>
  <td class="property">current_level_tile_map_tile_alignment_offset</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">currently_performing_song_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">currently_performing_song_duration_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func</td>
  <td class="property">std::function&lt;void(Pipeline::Gameplay::Screen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">player_is_colliding_on_goal</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">player_is_colliding_on_exit</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">entities_player_entity_is_colliding_with</td>
  <td class="property">std::set&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*&gt;</td>
</tr>
<tr>
  <td class="property">portal_entity_associations</td>
  <td class="property">std::map&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D*, AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D*&gt;</td>
</tr>
<tr>
  <td class="property">ATTRIBUTE_COLLIDABLE_BY_PLAYER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ATTRIBUTE_CUSTOM_COLLISION_RADIUS</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ATTRIBUTE_ITEM_TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ATTRIBUTE_ITEM_PICKUP_SOUND</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ATTRIBUTE_IS_PORTAL</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ATTRIBUTE_IS_NPC</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ATTRIBUTE_NPC_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">NPC_FORREST_IN_THE_FOREST</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">obtain_data_folder()</td>
</tr>
<tr>
  <td class="method">set_framework(AllegroFlare::Frameworks::Full* framework=nullptr)</td>
</tr>
<tr>
  <td class="method">set_event_emitter(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">set_bitmap_bin(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_model_bin(AllegroFlare::ModelBin* model_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">trivial_collide(AllegroFlare::Vec3D p1={0.0f, 0.0f, 0.0f}, AllegroFlare::Vec3D p2={0.0f, 0.0f, 0.0f}, float min_distance=10.0f)</td>
</tr>
<tr>
  <td class="method">set_primary_camera_to_gameplay_view()</td>
</tr>
<tr>
  <td class="method">set_primary_camera_to_dialog_view()</td>
</tr>
<tr>
  <td class="method">set_primary_camera_to_music_performance_view()</td>
</tr>
<tr>
  <td class="method">build_dialog_node_bank()</td>
</tr>
<tr>
  <td class="method">lowest_y_vertex(std::vector&lt;AllegroFlare::ALLEGRO_VERTEX_WITH_NORMAL&gt; vertices={})</td>
</tr>
<tr>
  <td class="method">find_named_object_identifiers_for_portals(AllegroFlare::Model3D* world_model=nullptr)</td>
</tr>
<tr>
  <td class="method">build_level(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">load_tile_map(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">load_tile_map_from_bitmap(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">load_tester_tile_map()</td>
</tr>
<tr>
  <td class="method">load_level_by_identifier(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">on_deactivate()</td>
</tr>
<tr>
  <td class="method">get_player_controlled_entity_as()</td>
</tr>
<tr>
  <td class="method">get_goal_entity_as()</td>
</tr>
<tr>
  <td class="method">get_exit_entity_as()</td>
</tr>
<tr>
  <td class="method">get_entity_as_dynamic_model_3d(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* colliding_entity=nullptr)</td>
</tr>
<tr>
  <td class="method">on_player_entity_raw_collide(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D* colliding_entity=nullptr)</td>
</tr>
<tr>
  <td class="method">on_player_entity_enter_collide(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D* colliding_entity=nullptr)</td>
</tr>
<tr>
  <td class="method">on_player_entity_exit_collide(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D* colliding_entity=nullptr)</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">toggle_showing_map_overlay()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">save_bitmap_buffers_to_files()</td>
</tr>
<tr>
  <td class="method">call_on_finished_callback_func()</td>
</tr>
<tr>
  <td class="method">on_event(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">game_event_func(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">display_switch_in_func()</td>
</tr>
<tr>
  <td class="method">key_up_func(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">key_down_func(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">joy_button_down_func(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">joy_button_up_func(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">joy_axis_func(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">virtual_control_button_up_func(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">virtual_control_axis_change_func(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">activate_music_performance(std::string music_identifier=&quot;[unset-music_identifier]&quot;, float duration_sec=10.0f)</td>
</tr>
<tr>
  <td class="method">deactivate_music_performance()</td>
</tr>
<tr>
  <td class="method">emit_event_to_save_progress()</td>
</tr>
<tr>
  <td class="method">set_state(uint32_t state=STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="method">normalize_age_no_clamp(float start_time=0.0f, float end_time=0.0f, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">update_state(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">is_valid_state(uint32_t state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">is_state(uint32_t possible_state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">infer_current_state_age(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="private_method">obtain_ui_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/Gameplay/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameConfigurations::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameConfigurations/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::GameConfigurations::Main&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/GameConfigurations/Main.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::Gameplay::Level&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/Gameplay/Level.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::SceneRenderer2&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_DIALOG_SWITCHED_OUT&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ALLEGRO_VERTEX_WITH_NORMAL&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ALLEGRO_VERTEX_WITH_NORMAL.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::DialogNodeBankFactory&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/DialogNodeBankFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionKit&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionKit.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::GameProgressAndStateInfo&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/GameProgressAndStateInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::String&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/String.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cos&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::fabs&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileTypeEnum&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileTypeEnum.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::BasicRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/BasicRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setprecision&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Physics::EntityTileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Physics/EntityTileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::MultiBitmapFilenameToWorldBuilder&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::Physics::GravityStepper&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/Physics/GravityStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::CSVToLevelLoader&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/CSVToLevelLoader.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Pipeline/Physics/GravityStepper.q.yml">quintessence/Pipeline/Physics/GravityStepper.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D*&gt;</td>
</tr>
<tr>
  <td class="property">gravity</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">process_step()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Pipeline/Runner.q.yml">quintessence/Pipeline/Runner.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">router</td>
  <td class="property">AllegroFlare::Routers::Standard</td>
</tr>
<tr>
  <td class="property">intro_logos_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">intro_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">title_screen</td>
  <td class="property">AllegroFlare::Screens::TitleScreen</td>
</tr>
<tr>
  <td class="property">achievements_screen</td>
  <td class="property">AllegroFlare::Screens::Achievements</td>
</tr>
<tr>
  <td class="property">version_screen</td>
  <td class="property">AllegroFlare::Screens::Version</td>
</tr>
<tr>
  <td class="property">load_a_saved_game_screen</td>
  <td class="property">AllegroFlare::LoadASavedGame::Screen</td>
</tr>
<tr>
  <td class="property">new_game_intro_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">level_select_screen</td>
  <td class="property">AllegroFlare::Screens::LevelSelectScreen</td>
</tr>
<tr>
  <td class="property">game_over_screen</td>
  <td class="property">AllegroFlare::Screens::GameOverScreen</td>
</tr>
<tr>
  <td class="property">game_won_screen</td>
  <td class="property">AllegroFlare::Screens::GameWonScreen</td>
</tr>
<tr>
  <td class="property">game_won_outro_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">settings_screen</td>
  <td class="property">AllegroFlare::Screens::SettingsScreen</td>
</tr>
<tr>
  <td class="property">rolling_credits_screen</td>
  <td class="property">AllegroFlare::Screens::RollingCredits</td>
</tr>
<tr>
  <td class="property">primary_gameplay_screen</td>
  <td class="property">Pipeline::Gameplay::Screen</td>
</tr>
<tr>
  <td class="property">game_configuration</td>
  <td class="property">Pipeline::GameConfigurations::Main*</td>
</tr>
<tr>
  <td class="property">game_progress_and_state_info</td>
  <td class="property">Pipeline::GameProgressAndStateInfo</td>
</tr>
<tr>
  <td class="property">game_progress_and_state_info_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">solid_black_background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::ClearToColor</td>
</tr>
<tr>
  <td class="property">release_info</td>
  <td class="property">ReleaseInfo</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">MY_ROUTE_EVENT_ACTIVATE_MY_CUSTOM_SCREEN</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">MY_CUSTOM_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">game_event_func(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">setup_sound_effects_and_music(AllegroFlare::AudioController* audio_controller_ptr=nullptr)</td>
</tr>
<tr>
  <td class="method">build_title_screen_menu_options()</td>
</tr>
<tr>
  <td class="method">mark_achievement_as_unlocked_and_save_progress(std::string achievement_identifier=&quot;[unset-achievement_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">mark_package_as_delivered_and_save_progress(std::string package_identifier=&quot;[unset-package_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">save_progress()</td>
</tr>
<tr>
  <td class="method">on_route_event_unhandled_func(uint32_t unhandled_event=0, AllegroFlare::Routers::Standard* router=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">continue_from_last_save()</td>
</tr>
<tr>
  <td class="method">all_packages_are_delivered()</td>
</tr>
<tr>
  <td class="method">setup_new_game_progress_and_state_info(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">load_last_played_session_or_start_new(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">setup_router()</td>
</tr>
<tr>
  <td class="method">run(std::string deployment_environment_mode=&quot;[unset-deployment_environment_mode]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Routers::Standard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Routers/Standard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Achievements&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::TitleScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/TitleScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::GameOverScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/GameOverScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::GameWonScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/GameWonScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::RollingCredits&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/RollingCredits.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Version&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Version.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::LevelSelectScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/LevelSelectScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::SettingsScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/SettingsScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievements&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StoryboardFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StoryboardFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RouteEventDatas::StartLevel&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RouteEventDatas/StartLevel.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameSession&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameSession.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::ClearToColor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/ClearToColor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ReleaseInfo&quot;, &quot;headers&quot;=&gt;[&quot;ReleaseInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::ScreenActivated&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/ScreenActivated.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameConfigurations::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameConfigurations/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Empty&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Empty.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/Gameplay/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::GameConfigurations::Main&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/GameConfigurations/Main.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Pipeline::GameProgressAndStateInfo&quot;, &quot;headers&quot;=&gt;[&quot;Pipeline/GameProgressAndStateInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::String&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/String.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "glEnable": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer",
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer",
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/Errors": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2"
  ],
  "ALLEGRO_BITMAP": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer",
    "LabyrinthOfLore/WorldMap/BitmapTileMapLoader",
    "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader"
  ],
  "ALLEGRO_DISPLAY": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2"
  ],
  "AllegroFlare/Camera3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer"
  ],
  "AllegroFlare/php": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2"
  ],
  "AllegroFlare/Shaders/Base": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/Shaders/ShadowMapping"
  ],
  "ALLEGRO_TRANSFORM": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer",
    "LabyrinthOfLore/Physics/EntityTileMapCollisionEvent",
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper",
    "Pipeline/Gameplay/Screen",
    "Pipeline/Physics/GravityStepper"
  ],
  "AllegroFlare/AllegroUnstable": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2"
  ],
  "AllegroFlare/RenderSurfaces/Bitmap": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer"
  ],
  "AllegroFlare/MultitextureModel3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer"
  ],
  "AllegroFlare/ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/DepthBuffer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2"
  ],
  "AllegroFlare/Placement3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer"
  ],
  "AllegroFlare/Model3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer",
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer"
  ],
  "AllegroFlare/Shaders/Cubemap": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer"
  ],
  "AllegroFlare/Shaders/Multitexture": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer",
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer"
  ],
  "AllegroFlare/Logger": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer2",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer",
    "AllegroFlare/Shaders/ShadowMapping",
    "Pipeline/CSVToLevelLoader",
    "Pipeline/GameConfigurations/Main",
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2"
  ],
  "AllegroFlare/Camera2D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2"
  ],
  "AllegroFlare/CubemapBuilder": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2"
  ],
  "AllegroFlare/Shaders/ShadowMapping": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowMapBuffer"
  ],
  "ALLEGRO_COLOR": [
    "AllegroFlare/Shaders/ShadowMapping",
    "LabyrinthOfLore/WorldMap/BitmapTileMapLoader",
    "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader"
  ],
  "AllegroFlare/UsefulPHP": [
    "AllegroFlare/Shaders/ShadowMapping",
    "Pipeline/CSVToLevelLoader",
    "Pipeline/Runner"
  ],
  "LabyrinthOfLore/WorldMap/tile_face_t": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionEvent",
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper"
  ],
  "LabyrinthOfLore/WorldMap/TileMap": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper",
    "LabyrinthOfLore/WorldMap/BasicRenderer",
    "LabyrinthOfLore/WorldMap/BitmapTileMapLoader",
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder",
    "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader",
    "Pipeline/Gameplay/Screen"
  ],
  "LabyrinthOfLore/Entity/Base": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper"
  ],
  "fabs": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper"
  ],
  "std/min": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper"
  ],
  "std/max": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper"
  ],
  "LabyrinthOfLore/Physics/EntityTileMapCollisionEvent": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper",
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper"
  ],
  "AllegroFlare/color/color": [
    "LabyrinthOfLore/WorldMap/BasicRenderer"
  ],
  "LabyrinthOfLore/WorldMap/Tile": [
    "LabyrinthOfLore/WorldMap/BasicRenderer",
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder"
  ],
  "al_draw_filled_rectangle": [
    "LabyrinthOfLore/WorldMap/BasicRenderer"
  ],
  "al_color_name": [
    "LabyrinthOfLore/WorldMap/BasicRenderer",
    "Pipeline/Gameplay/Screen"
  ],
  "al_init_primitives_addon": [
    "LabyrinthOfLore/WorldMap/BasicRenderer"
  ],
  "LabyrinthOfLore/WorldMap/TileTypeEnum": [
    "LabyrinthOfLore/WorldMap/BasicRenderer",
    "Pipeline/Gameplay/Screen"
  ],
  "std/stringstream": [
    "LabyrinthOfLore/WorldMap/BitmapTileMapLoader",
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder",
    "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader"
  ],
  "LabyrinthOfLore/WorldMap/BitmapTileMapLoader": [
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder"
  ],
  "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader": [
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder"
  ],
  "al_load_bitmap": [
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder"
  ],
  "LabyrinthOfLore/WorldMap/tile_type_t": [
    "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader"
  ],
  "AllegroFlare/CSVParser": [
    "Pipeline/CSVToLevelLoader"
  ],
  "SurviveTheCity/CSVParser": [
    "Pipeline/CSVToLevelLoader"
  ],
  "Pipeline/Gameplay/Level": [
    "Pipeline/CSVToLevelLoader",
    "Pipeline/GameConfigurations/Main",
    "Pipeline/Gameplay/Screen"
  ],
  "std/atoi": [
    "Pipeline/CSVToLevelLoader"
  ],
  "std/stof": [
    "Pipeline/CSVToLevelLoader"
  ],
  "std/abs": [
    "Pipeline/CurrentFloorInferencer"
  ],
  "AllegroFlare/DialogTree/NodeBank": [
    "Pipeline/DialogNodeBankFactory",
    "Pipeline/GameConfigurations/Main",
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/DialogTree/Nodes/MultipageWithOptions": [
    "Pipeline/DialogNodeBankFactory",
    "Pipeline/GameConfigurations/Main"
  ],
  "AllegroFlare/DialogTree/Nodes/ExitDialog": [
    "Pipeline/DialogNodeBankFactory"
  ],
  "AllegroFlare/DialogTree/Nodes/ExitProgram": [
    "Pipeline/DialogNodeBankFactory",
    "Pipeline/GameConfigurations/Main"
  ],
  "AllegroFlare/DialogTree/NodeOptions/ExitDialog": [
    "Pipeline/DialogNodeBankFactory",
    "Pipeline/GameConfigurations/Main"
  ],
  "AllegroFlare/DialogTree/NodeOptions/GoToNode": [
    "Pipeline/DialogNodeBankFactory",
    "Pipeline/GameConfigurations/Main"
  ],
  "AllegroFlare/DialogTree/Nodes/EmitGameEvent": [
    "Pipeline/DialogNodeBankFactory"
  ],
  "AllegroFlare/GameConfigurations/Base": [
    "Pipeline/GameConfigurations/Main",
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "AllegroFlare/Levels/Base": [
    "Pipeline/GameConfigurations/Main",
    "Pipeline/Gameplay/Level"
  ],
  "AllegroFlare/DialogTree/NodeBankFactory": [
    "Pipeline/GameConfigurations/Main"
  ],
  "AllegroFlare/DialogTree/Nodes/Wait": [
    "Pipeline/GameConfigurations/Main"
  ],
  "Pipeline/CSVToLevelLoader": [
    "Pipeline/GameConfigurations/Main",
    "Pipeline/Gameplay/Screen"
  ],
  "std/multiset": [
    "Pipeline/GameProgressAndStateInfo"
  ],
  "Pipeline/Base": [
    "Pipeline/GameProgressAndStateInfo"
  ],
  "AllegroFlare/GameProgressAndStateInfos/Base": [
    "Pipeline/GameProgressAndStateInfo"
  ],
  "Pipeline/JSONLoaders/Pipeline/GameProgressAndStateInfo": [
    "Pipeline/GameProgressAndStateInfo"
  ],
  "AllegroFlare/Vec2D": [
    "Pipeline/Gameplay/Level",
    "Pipeline/Gameplay/Screen",
    "Pipeline/Gameplay/Screen"
  ],
  "ALLEGRO_EVENT": [
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/Screens/Base": [
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "AllegroFlare/BitmapBin": [
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "AllegroFlare/EventEmitter": [
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "AllegroFlare/FontBin": [
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "AllegroFlare/ModelBin": [
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "al_is_primitives_addon_initialized": [
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/Player": [
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/VirtualControllers/Base": [
    "Pipeline/Gameplay/Screen"
  ],
  "Pipeline/Gameplay/Screen": [
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "Pipeline/GameConfigurations/Main": [
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "AllegroFlare/GameEvent": [
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer2": [
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory": [
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/Vec3D": [
    "Pipeline/Gameplay/Screen"
  ],
  "ALLEGRO_FLARE_EVENT_DIALOG_SWITCHED_OUT": [
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/ALLEGRO_VERTEX_WITH_NORMAL": [
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/Frameworks/Full": [
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "Pipeline/DialogNodeBankFactory": [
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/MotionKit": [
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/Interpolators": [
    "Pipeline/Gameplay/Screen"
  ],
  "Pipeline/GameProgressAndStateInfo": [
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "AllegroFlare/GameEventDatas/String": [
    "Pipeline/Gameplay/Screen",
    "Pipeline/Runner"
  ],
  "std/cos": [
    "Pipeline/Gameplay/Screen"
  ],
  "std/sin": [
    "Pipeline/Gameplay/Screen"
  ],
  "std/fabs": [
    "Pipeline/Gameplay/Screen"
  ],
  "std/fmod": [
    "Pipeline/Gameplay/Screen"
  ],
  "LabyrinthOfLore/WorldMap/BasicRenderer": [
    "Pipeline/Gameplay/Screen"
  ],
  "std/setprecision": [
    "Pipeline/Gameplay/Screen"
  ],
  "ALLEGRO_FONT": [
    "Pipeline/Gameplay/Screen"
  ],
  "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper": [
    "Pipeline/Gameplay/Screen"
  ],
  "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder": [
    "Pipeline/Gameplay/Screen"
  ],
  "Pipeline/Physics/GravityStepper": [
    "Pipeline/Gameplay/Screen"
  ],
  "AllegroFlare/vec3d": [
    "Pipeline/Physics/GravityStepper"
  ],
  "AllegroFlare/Routers/Standard": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Screens/Storyboard": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Screens/Achievements": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Screens/TitleScreen": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Screens/GameOverScreen": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Screens/GameWonScreen": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Screens/RollingCredits": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Screens/Version": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Screens/LevelSelectScreen": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Screens/SettingsScreen": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/LoadASavedGame/Screen": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Achievements": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/StoryboardFactory": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/RouteEventDatas/StartLevel": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/GameSession": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Color": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Elements/Backgrounds/ClearToColor": [
    "Pipeline/Runner"
  ],
  "ReleaseInfo": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionFactory": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/EventNames": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/GameEventDatas/ScreenActivated": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/LoadASavedGame/SaveSlots/Empty": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/AudioController": [
    "Pipeline/Runner"
  ],
  "AllegroFlare/GameEventDatas/AchievementUnlocked": [
    "Pipeline/Runner"
  ]
}
</pre>
</body>